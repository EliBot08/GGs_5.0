GGs Error Log Viewer – Stabilization & UX Upgrade Plan
======================================================

## Phase 1 – Crash Reproduction & Root Cause Containment
- **P1.1 Capture crash telemetry**
  - Reproduce the hover crash in `tools/GGs.ErrorLogViewer/Views/MainWindow.xaml` with WPF diagnostics logging enabled.
  - Collect the `InvalidOperationException` stack trace triggered by the `ToolbarButtonStyle` storyboard animating `RenderTransform.ScaleX/ScaleY` on a `Border` lacking a concrete `ScaleTransform` instance.
- **P1.2 Implement immediate guard**
  - Update `ToolbarButtonStyle` and any templates that animate transforms to include a default `<Border.RenderTransform><ScaleTransform/></Border.RenderTransform>` so the storyboard targets an animatable object.
  - Validate hover/press interactions no longer throw using `Snoop` or VS Live Visual Tree.
- **P1.3 Regression harness**
  - Add an automated UI smoke test (FlaUI) that hovers each toolbar button to ensure the animation executes without exceptions before future releases.

## Phase 2 – Toolbar & Command Experience Polish
- **P2.1 Normalize command bindings**
  - Audit `EnhancedMainViewModel` to ensure every toolbar button references a concrete `ICommand`. Stub or remove buttons that still point at placeholder commands.
  - Add `CanExecute` logic so disabled buttons expose intentional tooltips (e.g., “Start monitoring” disabled while running).
- **P2.2 Refine button styling**
  - Reduce horizontal padding and introduce a responsive `WrapPanel`/`UniformGrid` so buttons reflow gracefully on narrow widths.
  - Add `ToolTipService.ShowDuration` to avoid sticky tips while hovering rapidly across controls.
- **P2.3 Accessibility verification**
  - Confirm keyboard focus visuals remain after template change; add `FocusVisualStyle` if necessary.

## Phase 3 – Layout Breathing Room & Detail Panel Ergonomics
- **P3.1 Grid restructuring**
  - Convert the header/tool/filter rows into a vertical `Grid` that adds `Margin`/`Padding` spacing between sections.
  - Introduce a `GridLength.Auto` row for filters with `MinHeight` to prevent crowding and enable wrapping.
- **P3.2 Responsive log/result panes**
  - Ensure the log `DataGrid` and details panel share space via `GridSplitter`; provide minimum widths to avoid truncation.
  - Add `ScrollViewer` around the detail panel content with `Padding` so text doesn’t stick to borders.
- **P3.3 Theme consistency**
  - Adjust brushes to maintain contrast after spacing changes; verify both dark and light modes via `ThemeService` toggle.

## Phase 4 – Sidebar Navigation From Placeholder to Functional
- **P4.1 Command wiring**
  - Implement `SwitchToCompareViewCommand`, `SwitchToExportViewCommand`, and `SwitchToSettingsViewCommand` in `EnhancedMainViewModel` with backing view-state properties.
  - Bind each content region to dedicated `UserControl`s (e.g., `CompareView`, `ExportView`, `SettingsView`) to avoid “placeholder” tabs.
- **P4.2 Visual feedback**
  - Update the `NavButtonStyle` to display icons and selection indicators; ensure `IsChecked` toggles highlight correctly.
- **P4.3 Content scaffolding**
  - Provide minimal but functional layouts for Analytics, Bookmarks, Alerts, Compare, Export, and Settings to prevent empty states (e.g., summary text, call-to-action buttons).
- **P4.4 Navigation tests**
  - Add unit tests that validate `ActiveView` transitions and verify `Visibility` bindings respond when commands execute.

## Phase 5 – Validation & Release Readiness
- **P5.1 Manual smoke pass**
  - Exercise hover/perf interactions on high-DPI hardware and ensure no layout overlap.
- **P5.2 Automated suite**
  - Run `dotnet test` and the UI smoke harness created in P1.3 on CI.
- **P5.3 Documentation & changelog**
  - Update `clients/GGs.Desktop/README` (or new `docs/ui/error-log-viewer.md`) summarizing the UX improvements and test coverage.
- **P5.4 Deployment checklist**
  - Capture before/after screenshots, confirm zero warnings, and sign off with QA.
